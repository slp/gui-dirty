\input texinfo @c -*-texinfo-*-

@c %**start of header
@settitle User's Guide to the GNUstep GUI Library
@setfilename gstep-gui.info
@c %**end of header
@defcodeindex cl
@defcodeindex pr
@ignore
I'm using cindex for concepts, findex for methods, functions and macros,
prindex for protocols, and clindex for classes.
@end ignore

@ifinfo
@format
START-INFO-DIR-ENTRY
* gstep-gui::                      The GNUstep GUI Library
END-INFO-DIR-ENTRY
@end format
@end ifinfo

@c set the vars GNUSTEP-GUI-VERSION and GCC-VERSION
@include version.tmpl.texi

@ifinfo
This file documents the features and implementation of The GNUstep 
GUI Library.


Copyright (C) 1999 Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
section entitled ``GNU Library General Public License'' is included exactly as
in the original, and provided that the entire resulting derived work is
distributed under the terms of a permission notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that the section entitled ``GNU Library General Public License'' and
this permission notice may be included in translations approved by the
Free Software Foundation instead of in the original English.
@end ifinfo

@iftex
@finalout
@c @smallbook
@c @cropmarks
@end iftex

@setchapternewpage odd

@titlepage
@title User's Guide to the
@title GNUstep GUI Library
@sp 3
@subtitle Version @value{GNUSTEP-GUI-VERSION}
@author Adam Fedor (fedor@@gnu.org)
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 1999 Free Software Foundation, Inc.


Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
section entitled ``GNU Library General Public License'' is included exactly as
in the original, and provided that the entire resulting derived work is
distributed under the terms of a permission notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that the section entitled ``GNU Library General Public License'' may be
included in a translation approved by the author instead of in the original
English.

@end titlepage


@ifinfo
@node Top, Overview, (dir), (dir)
@top gstep-gui
@end ifinfo

This manual documents some configuration and installation issues
with the GNUstep GUI Library and also differences between the GUI
Library and libraries that implement the OpenStep AppKit specification
and the MacOS-X AppKit implementation.

@menu
* Overview::                    
* Configuration::               
* Classes::                     
* Tools::                       
* Implementation::              
* Setup::                       
* Contributing::                
* Concept Index::               
@end menu

@node Overview, Configuration, Top, Top
@chapter Overview

The GNUstep GUI Library is a library of objects useful for writing
graphical applications.  For example, it includes classes for drawing
and manipulating graphics objects on the screen: windows, menus,
buttons, sliders, text fields, and events.  There are also many
peripheral classes that offer operating-system-independent interfaces to
images, cursors, colors, fonts, pasteboards, printing.  There are also
workspace support classes such as data links, open/save panels,
context-dependent help, spell checking.

It provides functionality that aims to implement the @samp{AppKit}
portion of the OpenStep standard.  However the implementation has
been written to take advantage of GNUstep enhancements wherever possible.

The GNUstep GUI Library is divided into a front and back-end.  The
front-end contains the majority of implementation, but leaves out the
low-level drawing and event code.  Different back-ends will make GNUstep
available on various platforms.  The default GNU back-end currently runs
on top of the X Window System and uses only Xlib calls for
graphics. Another backend uses a Display Postscript Server for graphics.
Much work will be saved by this clean separation between front and
back-end, because it allows different platforms to share the large
amount of front-end code. Documentation for how the individual backends
work is coverered in a separate document.

@node Configuration, Classes, Overview, Top
@chapter Configuration

There is no special configuration to be done for the GUI library. It is
best to configure, compile, and install the gstep-gui library along with
all the other GNUstep libraries. For this, you should get the gstep-core
package and follow the installation instructions for that.

If you are compiling this library separately, you must have already
installed the GNUstep Makefile Pacakge and the GNUstep Base Library.

@node Classes, Tools, Configuration, Top
@chapter Special Features of GUI Classes.

@menu
* NSBrowserCell::               
@end menu

@node NSBrowserCell,  , Classes, Classes
@section NSBrowserCell

GNUstep NSBrowserCell has an experimental feature (disabled by default), 
which you may turn on by setting the @code{GSBrowserCellFontify} 
user default to @code{YES}.  

To turn it on, issue the command: 
@smallexample
defaults write NSGlobalDomain GSBrowserCellFontify YES
@end smallexample

To turn it off: 
@smallexample
defaults delete NSGlobalDomain GSBrowserCellFontify
@end smallexample

When the feature is on, NSBrowserCell draws non leaf cells 
in bold system font (as opposed to the leaf cells, 
which are drawn in (non bold) system font).

For example, when the feature is on, in a SavePanel (or OpenPanel), directory 
entries are drawn in bold, while simple files are drawn in non bold. 

@node Tools, Implementation, Classes, Top
@chapter Tools Included with gstep-gui.

@node Implementation, Setup, Tools, Top
@chapter Implementation Details

Following are some implementation details of the GUI library. These will
mostly be of interest to developers of the GUI library itself.

@menu
* Drag and Drop::               
* NSWorkspace::                 
@end menu

@node Drag and Drop, NSWorkspace, Implementation, Implementation
@section Drag and Drop

The drag types info for each view is kept in a global map table (protected by
locks) and can be accessed by the backend library using the function -

@smallexample
NSArray *GSGetDragTypes(NSView *aView);
@end smallexample

Drag type information for each window (a union of the drag type info for all
the views in the window) is maintained in the graphics context.
The backend can get this information (as a counted set) using -

@smallexample
- (NSCountedSet*) _dragTypesForWindow: (int)winNum;
@end smallexample

Whenever a DnD aware view is added to, or removed from a window, the type
information for that view is added to/removed from the type information
for the window, altering the counted set.  If the alteration results in a
change in the types for the window, the method making the change returns YES.

@smallexample
- (BOOL) _addDragTypes: (NSArray*)types toWindow: (int)winNum;
- (BOOL) _removeDragTypes: (NSArray*)types fromWindow: (int)winNum;
@end smallexample

The backend library should therefore override these methods and call 'super'
to handle the update.  If the call to the super method returns YES, the
backend should make any changes as appropriate (in the case of the xdnd
protocol this means altering the XdndAware property of the X window).

You will notice that these methods use the integer window number rather
than the NSWindow object - this is for the convenience of the backend
library which should (eventually) use window numbers for everything

@node NSWorkspace,  , Drag and Drop, Implementation
@section NSWorkspace

Here is (I think) the current state of the code (largely untested) -

The make_services tool examines all applications (anything with a .app,
.debug, or .profile suffix) in the system, local, and user Apps Directories.

In addition to the cache of services information, it builds a cache of
information about known applications (including information about file types
they handle).

NSWorkspace reads the cache and uses it to determine which application to use
to open a document and which icon to use to represent that document.

The NSWorkspace API has been extended to provide methods for finding/setting
the preferred icon/application for a particular file type.  NSWorkspace will
use the 'best' icon/application available.

To determine the executable to launch, if there was an
Info-gnustep.plist/Info.plist in the app wrapper and it had an
NSExecutable field - use that name.  Otherwise, try to use the name of
the app - eg. foo.app/foo The executable is launched by NSTask, which
handles the addition of machine/os/library path components as necessary.

To determine the icon for a file, use the value from the cache of icons
for the file extension, or use an 'unknown' icon.

To determine the icon for a folder, if the folder has a '.app', '.debug'
or '.profile' extension - examine the Info.plist file for an 'NSIcon'
value and try to use that.  If there is no value specified - try
foo.app/foo.tiff' or 'foo.app/.dir.tiff'

If the folder was not an application wrapper, just try the .dir.tiff file.

If no icon was available, use a default folder icon or a special icon for the
root directory.

The information about what file types an app can handle needs to be in
the MacOS-X format in the Info-gnustep.plist/Info.plist for the app -
see
@url{http://developer.apple.com/techpubs/macosxserver/System/Documentation/Developer/YellowBox/ReleaseNotes/InfoPlist.html}.

In the NSTypes fields, I used NSIcon (the icon to use for the type)
NSUnixExtensions (a list of file extensions corresponding to the type)
and NSRole (what the app can do with documents of this type).  In the
AppList cache, I generate a dictionary, keyed by file extension, whose
values are the dictionaries containing the NSTypes dictionaries of each
of the apps that handle the extension.

I tested the code briefly with the FileViewer app, and it seemed to
provide the icons as expected.

With this model the software doesn't need to monitor loads of
different files, just register to recieve notifications when the
defaults database changes, and check an appropriate default value.  At
present, there are four hidden files used by the software:

@table @samp
@item ~/GNUstep/Services/.GNUstepAppList
	Cached information about applications and file extensions.
@item ~/GNUstep/Services/.GNUstepExtPrefs
	User preferences for which apps/icons should be used for each file
	extension.
@item ~/GNUstep/Services/.GNUstepServices
	Cache of services provides by apps and services daemons
@item ~/GNUstep/Services/.GNUstepDisabled
	User settings to determine which services should not appear in the
	services menu.
@end table 

Each of these is a serialized property list.

Almost forgot - Need to modify NSApplication to understand '-GSOpenFile ...'
as an instruction to open the specified file on launching.  Need to modify
NSWorkspace to supply the appropriate arguments when launching a task rather
than using the existing mechanism of using DO to request that the app opens
the file.  When these changes are made, we can turn any program into a
pseudo-GNUstep app by creating the appropriate app wrapper.
An app wrapper then need only contain a shell-script that understands the
-GSOpenFile argument and uses it to start the program - though provision of
a GNUstep-info.plist and various icons would obviously make things prettier.

For instance - you could set up xv.app to contain a shellscript 'xv' that
would start the real xv binary passing it a file to open if the -GSOpenFile
argument was given.  The Info-gnustep.plist file could look like this:

@example
@{
  NSExecutable = "xv";
  NSIcon = "xv.tiff";
  NSTypes = (
    @{
      NSIcon = "tiff.tiff";
      NSUnixExtensions = ( tiff, tif );
    @},
    @{
      NSIcon = "xbm.tiff";
      NSUnixExtensions = ( xbm );
    @}
  );
@}
@end example

@node Setup, Contributing, Implementation, Top
@chapter Special Setup Instructions.

@menu
* Keyboard Modifiers::                     
@end menu

@node Keyboard Modifiers,  , Setup, Setup
@section Keyboard Modifiers

This section applies only to the xgps and the xdps backend. 

@subsection Default Settings
The OPENstep specification requires 3 main different keyboard 
modifiers: @key{CONTROL}, @key{COMMAND} and @key{ALTERNATE}.  
@c
@itemize @bullet
@item @key{COMMAND} is used to enter key equivalents (keyboard shortcuts 
for menus or buttons); for example, usually 'Quit' on the main 
menu of an application is bound to 'q', so you may usually quit 
a GNUstep application by pressing @kbd{Command - q}. 
@item @key{CONTROL} and @key{ALTERNATE} are two additional modifiers.
A typical use of @key{ALTERNATE} is to scroll by pages rather than 
by lines; you have to press @key{ALTERNATE} while acting on a scrollbar 
with the mouse. 
@end itemize
@c
By default, GNUstep uses @code{Control_L} (left Ctrl) 
and @code{Control_R} (right Ctrl) 
as @key{CONTROL}, @code{Alt_L} (left alt) as @key{COMMAND}, 
and @code{Alt_R} (right alt, sometimes called AltGr) as @key{ALTERNATE}.  

If this layout does not work for you, because your keyboard 
misses some of these keys, or they have different X names 
or they conflict heavily with your window manager shortcuts 
(or for any other reason), read on.  

@subsection Changing the Default Settings
Under GNUstep, you may change the default as you wish: 
you may choose which keys of your keyboard you want 
to use for @key{CONTROL}, @key{COMMAND} and @key{ALTERNATE} 
(You may even use different keys for different GNUstep applications, 
without conflict).  These settings are internal to GNUstep, 
and will not influence the behaviour of other X apps.  

You may choose up to 2 keys per modifier.  

Note that, if your keyboard is properly set up for X, 
you should @emph{not} need to remap your X keyboard 
to use GNUstep.  By changing the defaults, you should be able 
to use GNUstep whatever the X keyboard mapping might be.

What you have to do, is simply to instruct GNUstep to use 
different keys for @key{CONTROL}, @key{COMMAND} and @key{ALTERNATE}. 

The keys to use are determined at the application startup, 
by reading the user defaults database.  

To set the keys which will act as @key{CONTROL} you have to set 
@code{GSFirstControlKey} and @code{GSSecondControlKey}; and 
similarly for the other keys: 
@table @code
@item CONTROL
@code{GSFirstControlKey}
@code{GSSecondControlKey}
@item COMMAND
@code{GSFirstCommandKey}
@code{GSSecondCommandKey}
@item ALTERNATE
@code{GSFirstAlternateKey}
@code{GSSecondAlternateKey}
@end table

Valid values are all the standard strings for X keys.  
To disable completely a key, use @code{NoSymbol} as preference.

Each value which you do not explicity set is substituted with 
its default value.  The default values are: 
@table @code
@item GSFirstControlKey
@code{Control_L}
@item GSSecondControlKey
@code{Control_R}
@item GSFirstCommandKey
@code{Alt_L}
@item GSSecondCommandKey
@code{NoSymbol}
@item GSFirstAlternateKey
@code{Alt_R}
@item GSSecondAlternateKey
@code{NoSymbol}
@end table

What could go wrong is for example that you don't have 
an @code{Alt_L} key.  With the default settings, 
you will not be able to enter the @key{COMMAND} key 
(which is quite an important key).  
What you can do in this case is to use @code{Control_R} as @key{COMMAND}, 
giving the following commands (from the command line): 

@smallexample
defaults write NSGlobalDomain GSFirstCommandKey Control_R
defaults write NSGlobalDomain GSSecondControlKey NoSymbol
@end smallexample

These commands write in the GNUstep user database; 
the information will be used every time you start a GNUstep application. 

The first line sets @code{GSFirstCommandKey} to @code{Control_R}, 
which makes @code{Control_R} to be read as @key{COMMAND}.  

The second line disables the second control key, 
which would otherwise be bound to @code{Control_R} by default. 
If you omit it, @code{Control_R} will be used at the same time 
as @key{COMMAND} and as @key{CONTROL}, which is not very useful. 

To delete these preferences and restore the defaults, use 
@smallexample
defaults delete NSGlobalDomain GSFirstCommandKey
defaults delete NSGlobalDomain GSSecondControlKey
@end smallexample

To get a list of currently set defaults, you may use 
@smallexample
defaults read
@end smallexample
The list might be very long; you may want to extract only 
setting for the @code{GSFirstCommandKey}, for example: 
@smallexample
defaults read | grep GSFirstCommandKey
@end smallexample

A thing which could go wrong if you are trying to use 
a setting different from the default, and you do not know much 
about X, is that you can't find out the name of one of your key.  
In this case, you may try having a look at the output of programs 
like @code{xmodmap} or @code{xkeycaps}; even if you do not 
understand it completely, the output can inspire the right guessing.

A problem you are likely to encounter is that of conflicts 
with the window manager keyboard shortcuts.  
Good window managers let you change the keyboard shortcuts, 
so you may move the wm shortcuts that you do not use to keys 
which do not conflict (at least not too much) with GNUstep.  
Usually, to use GNUstep keyboard shortcuts efficiently 
you need the @key{COMMAND} and @key{CONTROL} key free 
from window manager interferences; you may perhaps share 
the @key{ALTERNATE} key, which is used less, 
or in conjunction with @key{COMMAND}.  

@node Contributing, Concept Index, Setup, Top
@chapter Contributing

Contributing code is not difficult. Here are
some general guidelines:

@itemize @bullet

@item
FSF must maintain the right to accept or reject potential contributions.
Generally, the only reasons for rejecting contributions are cases where
they duplicate existing or nearly-released code, contain unremovable
specific machine dependencies, or are somehow incompatible with the
rest of the library. 

@item
Acceptance of contributions means that the code is accepted for adaptation
into libgnustep-gui.  FSF must reserve the right to make various editorial changes
in code. Very often, this merely entails formatting, maintenance of various
conventions, etc. Contributors are always given authorship credit and shown
the final version for approval.

@item
Contributors must assign their copyright to FSF via a form sent out
upon acceptance. Assigning copyright to FSF ensures that the code
may be freely distributed.

@item
Assistance in providing documentation, test files, and debugging
support is strongly encouraged.

@end itemize

Extensions, comments, and suggested modifications of existing libgnustep-gui
features are also very welcome.

@node Concept Index,  , Contributing, Top
@unnumbered Concept Index
@printindex cp

@summarycontents
@contents

@bye
