<?xml version="1.0"?>
<!DOCTYPE gsdoc PUBLIC "-//GNUstep//DTD gsdoc 0.6.7//EN" "http://www.gnustep.org/gsdoc-0_6_7.xml">
<gsdoc base="NSAffineTransform" next="NSApplication" prev="NSActionCell" up="NSActionCell">
  <head>
    <title>NSAffineTransform.m</title>
    <author name="Ovidiu Predescu">
      <email address="ovidiu@net-community.com">
        ovidiu@net-community.com
      </email>
    </author>
    <author name="Richard Frith-Macdonald">
      <email address="richard@brainstorm.co.uk">
        richard@brainstorm.co.uk
      </email>
    </author>
    <copy>1996,1999 Free Software Foundation, Inc.</copy>
  </head>
  <body>
    <chapter>
      <heading>
        Software documentation for the NSAffineTransform class
      </heading>
      <class name="NSAffineTransform" super="NSObject">
        <declared>AppKit/NSAffineTransform.h</declared>
        <conform>NSCopying</conform>
        <conform>NSCoding</conform>
        <desc>
        </desc>
        <method type="NSAffineTransform*" factory="yes">
          <sel>transform</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>appendTransform:</sel>
          <arg type="NSAffineTransform*">other</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>concat</sel>
          <desc>
          </desc>
        </method>
        <method type="id">
          <sel>initWithTransform:</sel>
          <arg type="NSAffineTransform*">aTransform</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>invert</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>prependTransform:</sel>
          <arg type="NSAffineTransform*">other</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>rotateByDegrees:</sel>
          <arg type="float">angle</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>rotateByRadians:</sel>
          <arg type="float">angleRad</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>scaleBy:</sel>
          <arg type="float">scale</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>scaleXBy:</sel>
          <arg type="float">scaleX</arg>
          <sel>yBy:</sel>
          <arg type="float">scaleY</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>set</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setTransformStruct:</sel>
          <arg type="NSAffineTransformStruct">val</arg>
          <desc>
          </desc>
        </method>
        <method type="NSBezierPath*">
          <sel>transformBezierPath:</sel>
          <arg type="NSBezierPath*">aPath</arg>
          <desc>
          </desc>
        </method>
        <method type="NSPoint">
          <sel>transformPoint:</sel>
          <arg type="NSPoint">point</arg>
          <desc>
          </desc>
        </method>
        <method type="NSSize">
          <sel>transformSize:</sel>
          <arg type="NSSize">size</arg>
          <desc>
          </desc>
        </method>
        <method type="NSAffineTransformStruct">
          <sel>transformStruct</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>translateXBy:</sel>
          <arg type="float">tranX</arg>
          <sel>yBy:</sel>
          <arg type="float">tranY</arg>
          <desc>
          </desc>
        </method>
      </class>
    </chapter>
    <chapter>
      <heading>
        Software documentation for the
        NSAffineTransform(GNUstep) category
      </heading>
      <category name="GNUstep" class="NSAffineTransform">
        <declared>AppKit/NSAffineTransform.h</declared>
        <desc>
        </desc>
        <method type="NSAffineTransform*" factory="yes">
          <sel>matrixFrom:</sel>
          <arg type="const float[6]">_matrix</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>boundingRectFor:</sel>
          <arg type="NSRect">rect</arg>
          <sel>result:</sel>
          <arg type="NSRect*">new</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>concatenateWith:</sel>
          <arg type="NSAffineTransform*">other</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>concatenateWithMatrix:</sel>
          <arg type="const float[6]">concat</arg>
          <desc>
          </desc>
        </method>
        <method type="NSPoint">
          <sel>deltaPointInMatrixSpace:</sel>
          <arg type="NSPoint">point</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>getMatrix:</sel>
          <arg type="float[6]">replace</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>inverse</sel>
          <desc>
          </desc>
        </method>
        <method type="BOOL">
          <sel>isRotated</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>makeIdentityMatrix</sel>
          <desc>
          </desc>
        </method>
        <method type="NSPoint">
          <sel>pointInMatrixSpace:</sel>
          <arg type="NSPoint">point</arg>
          <desc>
          </desc>
        </method>
        <method type="NSRect">
          <sel>rectInMatrixSpace:</sel>
          <arg type="NSRect">rect</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>rotateByAngle:</sel>
          <arg type="float">angle</arg>
          <desc>
          </desc>
        </method>
        <method type="float">
          <sel>rotationAngle</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>scaleBy:</sel>
          <arg type="float">sx</arg>
          <sel>:</sel>
          <arg type="float">sy</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>scaleTo:</sel>
          <arg type="float">sx</arg>
          <sel>:</sel>
          <arg type="float">sy</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setFrameOrigin:</sel>
          <arg type="NSPoint">point</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setFrameRotation:</sel>
          <arg type="float">angle</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setMatrix:</sel>
          <arg type="const float[6]">replace</arg>
          <desc>
          </desc>
        </method>
        <method type="NSSize">
          <sel>sizeInMatrixSpace:</sel>
          <arg type="NSSize">size</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>takeMatrixFromTransform:</sel>
          <arg type="NSAffineTransform*">other</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>translateToPoint:</sel>
          <arg type="NSPoint">point</arg>
          <desc>
          </desc>
        </method>
      </category>
    </chapter>
  </body>
</gsdoc>
