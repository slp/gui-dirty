<?xml version="1.0"?>
<!DOCTYPE gsdoc PUBLIC "-//GNUstep//DTD gsdoc 0.6.7//EN" "http://www.gnustep.org/gsdoc-0_6_7.xml">
<gsdoc base="NSWindow" next="NSWindowController" prev="NSView" up="NSActionCell">
  <head>
    <title>NSWindow</title>
    <author name="Scott Christley">
      <email address="scottc@net-community.com">
        scottc@net-community.com
      </email>
    </author>
    <author name="Felipe A. Rodriguez">
      <email address="far@ix.netcom.com">
        far@ix.netcom.com
      </email>
    </author>
    <author name="Richard Frith-Macdonald">
      <email address="richard@brainstorm.co.uk">
        richard@brainstorm.co.uk
      </email>
    </author>
    <abstract>The window class</abstract>
    <copy>1996 Free Software Foundation, Inc.</copy>
  </head>
  <body>
    <chapter>
      <heading>NSWindow</heading>
      <p>
        Instances of the NSWindow class handle on-screen
        windows, their associated NSViews, and events generate
        by the user. An NSWindow's size is defined by its frame
        rectangle, which encompasses its entire structure,
        and its content rectangle, which includes only the content.
      </p>
      <p>
        Every NSWindow has a content view, the NSView which forms
        the root of the window's view hierarchy. This view can be
        set using the <code>setContentView:</code> method, and
        accessed through the <code>contentView</code> method.
        <code>setContentView:</code> replaces the default
        content view created by NSWindow.
      </p>
      <p>
        Other views may be added to the window by using the
        content view's <code>addSubview:</code> method. These
        subviews can also have subviews added, forming a tree
        structure, the view hierarchy. When an NSWindow must
        display itself, it causes this hierarchy to draw
        itself. Leaf nodes in the view hierarchy are drawn
        last, causing them to potentially obscure views further
        up in the hierarchy.
      </p>
      <p>
        A delegate can be specified for an NSWindow, which will
        receive notifications of events pertaining to the
        window. The delegate is set using
        <code>setDelegate:</code>, and can be retrieved using
        <code>delegate</code>. The delegate can restrain
        resizing by implementing the
        <code>windowWillResize: toSize:</code> method, or
        control the closing of the window by implementing
        <code>windowShouldClose:</code>.
      </p>
      <class name="NSWindow" super="NSResponder">
        <declared>AppKit/NSWindow.h</declared>
        <conform>NSCoding</conform>
        <desc>
        </desc>
        <method type="NSRect" factory="yes">
          <sel>contentRectForFrameRect:</sel>
          <arg type="NSRect">aRect</arg>
          <sel>styleMask:</sel>
          <arg type="unsigned int">aStyle</arg>
          <desc>
          </desc>
        </method>
        <method type="NSWindowDepth" factory="yes">
          <sel>defaultDepthLimit</sel>
          <desc>
          </desc>
        </method>
        <method type="NSRect" factory="yes">
          <sel>frameRectForContentRect:</sel>
          <arg type="NSRect">aRect</arg>
          <sel>styleMask:</sel>
          <arg type="unsigned int">aStyle</arg>
          <desc>
          </desc>
        </method>
        <method type="void" factory="yes">
          <sel>menuChanged:</sel>
          <arg type="NSMenu*">aMenu</arg>
          <desc>
          </desc>
        </method>
        <method type="NSRect" factory="yes">
          <sel>minFrameWidthWithTitle:</sel>
          <arg type="NSString*">aTitle</arg>
          <sel>styleMask:</sel>
          <arg type="unsigned int">aStyle</arg>
          <desc>
          </desc>
        </method>
        <method type="void" factory="yes">
          <sel>removeFrameUsingName:</sel>
          <arg type="NSString*">name</arg>
          <desc>
          </desc>
        </method>
        <method type="BOOL">
          <sel>acceptsMouseMovedEvents</sel>
          <desc>
          </desc>
        </method>
        <method type="float">
          <sel>alphaValue</sel>
          <desc>
          </desc>
        </method>
        <method type="NSTimeInterval">
          <sel>animationResizeTime:</sel>
          <arg type="NSRect">newFrame</arg>
          <desc>
          </desc>
        </method>
        <method type="BOOL">
          <sel>areCursorRectsEnabled</sel>
          <desc>
          </desc>
        </method>
        <method type="NSSize">
          <sel>aspectRatio</sel>
          <desc>
          </desc>
        </method>
        <method type="NSColor*">
          <sel>backgroundColor</sel>
          <desc>
          </desc>
        </method>
        <method type="NSBackingStoreType">
          <sel>backingType</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>becomeKeyWindow</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>becomeMainWindow</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>cacheImageInRect:</sel>
          <arg type="NSRect">aRect</arg>
          <desc>
          </desc>
        </method>
        <method type="BOOL">
          <sel>canBecomeKeyWindow</sel>
          <desc>
          </desc>
        </method>
        <method type="BOOL">
          <sel>canBecomeMainWindow</sel>
          <desc>
          </desc>
        </method>
        <method type="BOOL">
          <sel>canHide</sel>
          <desc>
          </desc>
        </method>
        <method type="BOOL">
          <sel>canStoreColor</sel>
          <desc>
          </desc>
        </method>
        <method type="NSPoint">
          <sel>cascadeTopLeftFromPoint:</sel>
          <arg type="NSPoint">topLeftPoint</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>center</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>close</sel>
          <desc>
          </desc>
        </method>
        <method type="NSRect">
          <sel>constrainFrameRect:</sel>
          <arg type="NSRect">frameRect</arg>
          <sel>toScreen:</sel>
          <arg type="id">screen</arg>
          <desc>
          </desc>
        </method>
        <method type="id">
          <sel>contentView</sel>
          <desc>
          </desc>
        </method>
        <method type="NSPoint">
          <sel>convertBaseToScreen:</sel>
          <arg type="NSPoint">basePoint</arg>
          <desc>
          </desc>
        </method>
        <method type="NSPoint">
          <sel>convertScreenToBase:</sel>
          <arg type="NSPoint">screenPoint</arg>
          <desc>
          </desc>
        </method>
        <method type="NSWindow*">
          <sel>counterpart</sel>
          <desc>
          </desc>
        </method>
        <method type="NSEvent*">
          <sel>currentEvent</sel>
          <desc>
          </desc>
        </method>
        <method type="NSData*">
          <sel>dataWithEPSInsideRect:</sel>
          <arg type="NSRect">rect</arg>
          <desc>
          </desc>
        </method>
        <method type="NSData*">
          <sel>dataWithPDFInsideRect:</sel>
          <arg type="NSRect">aRect</arg>
          <desc>
          </desc>
        </method>
        <method type="NSScreen*">
          <sel>deepestScreen</sel>
          <desc>
          </desc>
        </method>
        <method type="NSButtonCell*">
          <sel>defaultButtonCell</sel>
          <desc>
          </desc>
        </method>
        <method type="id">
          <sel>delegate</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>deminiaturize:</sel>
          <arg type="id">sender</arg>
          <desc>
            Causes the window to deminiaturize. Normally you
            would not call this method directly. A window is
            automatically deminiaturized by the user via
            a mouse cloick event.
          </desc>
        </method>
        <method type="NSWindowDepth">
          <sel>depthLimit</sel>
          <desc>
          </desc>
        </method>
        <method type="NSDictionary*">
          <sel>deviceDescription</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>disableCursorRects</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>disableFlushWindow</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>disableKeyEquivalentForDefaultButtonCell</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>discardCachedImage</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>discardCursorRects</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>discardEventsMatchingMask:</sel>
          <arg type="unsigned int">mask</arg>
          <sel>beforeEvent:</sel>
          <arg type="NSEvent*">lastEvent</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>display</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>displayIfNeeded</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>dragImage:</sel>
          <arg type="NSImage*">anImage</arg>
          <sel>at:</sel>
          <arg type="NSPoint">baseLocation</arg>
          <sel>offset:</sel>
          <arg type="NSSize">initialOffset</arg>
          <sel>event:</sel>
          <arg type="NSEvent*">event</arg>
          <sel>pasteboard:</sel>
          <arg type="NSPasteboard*">pboard</arg>
          <sel>source:</sel>
          <arg type="id">sourceObject</arg>
          <sel>slideBack:</sel>
          <arg type="BOOL">slideFlag</arg>
          <desc>
          </desc>
        </method>
        <method type="NSArray*">
          <sel>drawers</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>enableCursorRects</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>enableFlushWindow</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>enableKeyEquivalentForDefaultButtonCell</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>endEditingFor:</sel>
          <arg type="id">anObject</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>fax:</sel>
          <arg type="id">sender</arg>
          <desc>
          </desc>
        </method>
        <method type="NSText*">
          <sel>fieldEditor:</sel>
          <arg type="BOOL">createFlag</arg>
          <sel>forObject:</sel>
          <arg type="id">anObject</arg>
          <desc>
          </desc>
        </method>
        <method type="NSResponder*">
          <sel>firstResponder</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>flushWindow</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>flushWindowIfNeeded</sel>
          <desc>
          </desc>
        </method>
        <method type="NSRect">
          <sel>frame</sel>
          <desc>
          </desc>
        </method>
        <method type="NSString*">
          <sel>frameAutosaveName</sel>
          <desc>
          </desc>
        </method>
        <method type="int">
          <sel>gState</sel>
          <desc>
          </desc>
        </method>
        <method type="BOOL">
          <sel>hasDynamicDepthLimit</sel>
          <desc>
          </desc>
        </method>
        <method type="BOOL">
          <sel>hasShadow</sel>
          <desc>
          </desc>
        </method>
        <method type="BOOL">
          <sel>hidesOnDeactivate</sel>
          <desc>
          </desc>
        </method>
        <method type="id">
          <sel>initWithContentRect:</sel>
          <arg type="NSRect">contentRect</arg>
          <sel>styleMask:</sel>
          <arg type="unsigned int">aStyle</arg>
          <sel>backing:</sel>
          <arg type="NSBackingStoreType">bufferingType</arg>
          <sel>defer:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <p>
              Initializes the receiver with a content rect
              of <var>contentRect</var>, a style mask of
              <var>styleMask</var>, and a backing store type of
              <var>backingType</var>.
            </p>
            <p>
              The style mask values are
              <code>NSTitledWindowMask</code>, for a window with
              a title, <code>NSClosableWindowMask</code>, for a
              window with a close widget,
              <code>NSMiniaturizableWindowMask</code>, for a
              window with a miniaturize widget, and
              <code>NSResizableWindowMask</code>, for a window
              with a resizing widget. These mask values can be
              OR'd in any combination.
            </p>
            <p>
              Backing store values are
              <code>NSBackingStoreBuffered</code>,
              <code>NSBackingStoreRetained</code> and
              <code>NSBackingStoreNonretained</code>.
            </p>
          </desc>
        </method>
        <method type="id">
          <sel>initWithContentRect:</sel>
          <arg type="NSRect">contentRect</arg>
          <sel>styleMask:</sel>
          <arg type="unsigned int">aStyle</arg>
          <sel>backing:</sel>
          <arg type="NSBackingStoreType">bufferingType</arg>
          <sel>defer:</sel>
          <arg type="BOOL">flag</arg>
          <sel>screen:</sel>
          <arg type="NSScreen*">aScreen</arg>
          <desc>
            <p>
              Initializes the receiver with a content rect
              of <var>contentRect</var>, a style mask of
              <var>styleMask</var>, a backing store type of
              <var>backingType</var> and a boolean
              <var>flag</var>. <var>flag</var> specifies whether
              the window should be created now (<code>NO</code>),
              or when it is displayed (<code>YES</code>).
            </p>
            <p>
              The style mask values are
              <code>NSTitledWindowMask</code>, for a window with
              a title, <code>NSClosableWindowMask</code>, for a
              window with a close widget,
              <code>NSMiniaturizableWindowMask</code>, for a
              window with a miniaturize widget, and
              <code>NSResizableWindowMask</code>, for a window
              with a resizing widget. These mask values can be
              OR'd in any combination.
            </p>
            <p>
              Backing store values are
              <code>NSBackingStoreBuffered</code>,
              <code>NSBackingStoreRetained</code> and
              <code>NSBackingStoreNonretained</code>.
            </p>
          </desc>
        </method>
        <method type="NSWindow*">
          <sel>initWithWindowRef:</sel>
          <arg type="void*">windowRef</arg>
          <desc>
          </desc>
        </method>
        <method type="NSView*">
          <sel>initialFirstResponder</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>invalidateCursorRectsForView:</sel>
          <arg type="NSView*">aView</arg>
          <desc>
          </desc>
        </method>
        <method type="BOOL">
          <sel>isAutodisplay</sel>
          <desc>
          </desc>
        </method>
        <method type="BOOL">
          <sel>isDocumentEdited</sel>
          <desc>
          </desc>
        </method>
        <method type="BOOL">
          <sel>isExcludedFromWindowsMenu</sel>
          <desc>
          </desc>
        </method>
        <method type="BOOL">
          <sel>isFlushWindowDisabled</sel>
          <desc>
          </desc>
        </method>
        <method type="BOOL">
          <sel>isKeyWindow</sel>
          <desc>
          </desc>
        </method>
        <method type="BOOL">
          <sel>isMainWindow</sel>
          <desc>
          </desc>
        </method>
        <method type="BOOL">
          <sel>isMiniaturized</sel>
          <desc>
          </desc>
        </method>
        <method type="BOOL">
          <sel>isOneShot</sel>
          <desc>
          </desc>
        </method>
        <method type="BOOL">
          <sel>isOpaque</sel>
          <desc>
          </desc>
        </method>
        <method type="BOOL">
          <sel>isReleasedWhenClosed</sel>
          <desc>
          </desc>
        </method>
        <method type="BOOL">
          <sel>isVisible</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>keyDown:</sel>
          <arg type="NSEvent*">theEvent</arg>
          <desc>
          </desc>
        </method>
        <method type="NSSelectionDirection">
          <sel>keyViewSelectionDirection</sel>
          <desc>
          </desc>
        </method>
        <method type="int">
          <sel>level</sel>
          <desc>
          </desc>
        </method>
        <method type="BOOL">
          <sel>makeFirstResponder:</sel>
          <arg type="NSResponder*">aResponder</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>makeKeyAndOrderFront:</sel>
          <arg type="id">sender</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>makeKeyWindow</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>makeMainWindow</sel>
          <desc>
          </desc>
        </method>
        <method type="NSSize">
          <sel>maxSize</sel>
          <desc>
          </desc>
        </method>
        <method type="NSSize">
          <sel>minSize</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>miniaturize:</sel>
          <arg type="id">sender</arg>
          <desc>
            Causes the window to miniaturize, that is the window
            is removed from the screen and it's counterpart
            (mini)window is displayed.
          </desc>
        </method>
        <method type="NSImage*">
          <sel>miniwindowImage</sel>
          <desc>
          </desc>
        </method>
        <method type="NSString*">
          <sel>miniwindowTitle</sel>
          <desc>
          </desc>
        </method>
        <method type="NSPoint">
          <sel>mouseLocationOutsideOfEventStream</sel>
          <desc>
          </desc>
        </method>
        <method type="NSEvent*">
          <sel>nextEventMatchingMask:</sel>
          <arg type="unsigned int">mask</arg>
          <desc>
          </desc>
        </method>
        <method type="NSEvent*">
          <sel>nextEventMatchingMask:</sel>
          <arg type="unsigned int">mask</arg>
          <sel>untilDate:</sel>
          <arg type="NSDate*">expiration</arg>
          <sel>inMode:</sel>
          <arg type="NSString*">mode</arg>
          <sel>dequeue:</sel>
          <arg type="BOOL">deqFlag</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>orderBack:</sel>
          <arg type="id">sender</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>orderFront:</sel>
          <arg type="id">sender</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>orderFrontRegardless</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>orderOut:</sel>
          <arg type="id">sender</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>orderWindow:</sel>
          <arg type="NSWindowOrderingMode">place</arg>
          <sel>relativeTo:</sel>
          <arg type="int">otherWin</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>performClose:</sel>
          <arg type="id">sender</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>performMiniaturize:</sel>
          <arg type="id">sender</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>performZoom:</sel>
          <arg type="id">sender</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>postEvent:</sel>
          <arg type="NSEvent*">event</arg>
          <sel>atStart:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>print:</sel>
          <arg type="id">sender</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>registerForDraggedTypes:</sel>
          <arg type="NSArray*">newTypes</arg>
          <desc>
          </desc>
        </method>
        <method type="NSString*">
          <sel>representedFilename</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>resetCursorRects</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>resignKeyWindow</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>resignMainWindow</sel>
          <desc>
          </desc>
        </method>
        <method type="int">
          <sel>resizeFlags</sel>
          <desc>
          </desc>
        </method>
        <method type="NSSize">
          <sel>resizeIncrements</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>restoreCachedImage</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>runToolbarCustomizationPalette:</sel>
          <arg type="id">sender</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>saveFrameUsingName:</sel>
          <arg type="NSString*">name</arg>
          <desc>
          </desc>
        </method>
        <method type="NSScreen*">
          <sel>screen</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>selectKeyViewFollowingView:</sel>
          <arg type="NSView*">aView</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>selectKeyViewPrecedingView:</sel>
          <arg type="NSView*">aView</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>selectNextKeyView:</sel>
          <arg type="id">sender</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>selectPreviousKeyView:</sel>
          <arg type="id">sender</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>sendEvent:</sel>
          <arg type="NSEvent*">theEvent</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setAcceptsMouseMovedEvents:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setAlphaValue:</sel>
          <arg type="float">windowAlpha</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setAspectRatio:</sel>
          <arg type="NSSize">ratio</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setAutodisplay:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setBackgroundColor:</sel>
          <arg type="NSColor*">color</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setBackingType:</sel>
          <arg type="NSBackingStoreType">type</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setCanHide:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setContentSize:</sel>
          <arg type="NSSize">aSize</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setContentView:</sel>
          <arg type="NSView*">aView</arg>
          <desc>
            Sets the window's content view to <var>aView</var>,
            replacing any previous content view.
          </desc>
        </method>
        <method type="void">
          <sel>setDefaultButtonCell:</sel>
          <arg type="NSButtonCell*">aButtonCell</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setDelegate:</sel>
          <arg type="id">anObject</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setDepthLimit:</sel>
          <arg type="NSWindowDepth">limit</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setDocumentEdited:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setDynamicDepthLimit:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setExcludedFromWindowsMenu:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setFrame:</sel>
          <arg type="NSRect">frameRect</arg>
          <sel>display:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setFrame:</sel>
          <arg type="NSRect">frameRect</arg>
          <sel>display:</sel>
          <arg type="BOOL">displayFlag</arg>
          <sel>animate:</sel>
          <arg type="BOOL">animationFlag</arg>
          <desc>
          </desc>
        </method>
        <method type="BOOL">
          <sel>setFrameAutosaveName:</sel>
          <arg type="NSString*">name</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setFrameFromString:</sel>
          <arg type="NSString*">string</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setFrameOrigin:</sel>
          <arg type="NSPoint">aPoint</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setFrameTopLeftPoint:</sel>
          <arg type="NSPoint">aPoint</arg>
          <desc>
          </desc>
        </method>
        <method type="BOOL">
          <sel>setFrameUsingName:</sel>
          <arg type="NSString*">name</arg>
          <desc>
          </desc>
        </method>
        <method type="BOOL">
          <sel>setFrameUsingName:</sel>
          <arg type="NSString*">name</arg>
          <sel>force:</sel>
          <arg type="BOOL">force</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setHasShadow:</sel>
          <arg type="BOOL">hasShadow</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setHidesOnDeactivate:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setInitialFirstResponder:</sel>
          <arg type="NSView*">aView</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setLevel:</sel>
          <arg type="int">newLevel</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setMaxSize:</sel>
          <arg type="NSSize">aSize</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setMinSize:</sel>
          <arg type="NSSize">aSize</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setMiniwindowImage:</sel>
          <arg type="NSImage*">image</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setMiniwindowTitle:</sel>
          <arg type="NSString*">title</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setOneShot:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setOpaque:</sel>
          <arg type="BOOL">isOpaque</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setReleasedWhenClosed:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setRepresentedFilename:</sel>
          <arg type="NSString*">aString</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setResizeIncrements:</sel>
          <arg type="NSSize">aSize</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setShowsResizeIndicator:</sel>
          <arg type="BOOL">show</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setTitle:</sel>
          <arg type="NSString*">aString</arg>
          <desc>
            Sets the window's title to the string
            <var>aString</var>.
          </desc>
        </method>
        <method type="void">
          <sel>setTitleWithRepresentedFilename:</sel>
          <arg type="NSString*">aString</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setToolbar:</sel>
          <arg type="NSToolbar*">toolbar</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setViewsNeedDisplay:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>setWindowController:</sel>
          <arg type="NSWindowController*">windowController</arg>
          <desc>
          </desc>
        </method>
        <method type="BOOL">
          <sel>showsResizeIndicator</sel>
          <desc>
          </desc>
        </method>
        <method type="NSString*">
          <sel>stringWithSavedFrame</sel>
          <desc>
          </desc>
        </method>
        <method type="unsigned int">
          <sel>styleMask</sel>
          <desc>
          </desc>
        </method>
        <method type="NSString*">
          <sel>title</sel>
          <desc>
            Returns an NSString containing the text of the
            window's title.
          </desc>
        </method>
        <method type="void">
          <sel>toggleToolbarShown:</sel>
          <arg type="id">sender</arg>
          <desc>
          </desc>
        </method>
        <method type="NSToolbar*">
          <sel>toolbar</sel>
          <desc>
          </desc>
        </method>
        <method type="BOOL">
          <sel>tryToPerform:</sel>
          <arg type="SEL">anAction</arg>
          <sel>with:</sel>
          <arg type="id">anObject</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>unregisterDraggedTypes</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>update</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>useOptimizedDrawing:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
          </desc>
        </method>
        <method type="id">
          <sel>validRequestorForSendType:</sel>
          <arg type="NSString*">sendType</arg>
          <sel>returnType:</sel>
          <arg type="NSString*">returnType</arg>
          <desc>
          </desc>
        </method>
        <method type="BOOL">
          <sel>viewsNeedDisplay</sel>
          <desc>
          </desc>
        </method>
        <method type="id">
          <sel>windowController</sel>
          <desc>
          </desc>
        </method>
        <method type="void*">
          <sel>windowHandle</sel>
          <desc>
          </desc>
        </method>
        <method type="int">
          <sel>windowNumber</sel>
          <desc>
          </desc>
        </method>
        <method type="void*">
          <sel>windowRef</sel>
          <desc>
          </desc>
        </method>
        <method type="BOOL">
          <sel>worksWhenModal</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>zoom:</sel>
          <arg type="id">sender</arg>
          <desc>
          </desc>
        </method>
      </class>
    </chapter>
    <chapter>
      <heading>
        Software documentation for the
        NSObject(NSWindowDelegate) category
      </heading>
      <category name="NSWindowDelegate" class="NSObject">
        <declared>AppKit/NSWindow.h</declared>
        <desc>
        </desc>
        <method type="void">
          <sel>windowDidBecomeKey:</sel>
          <arg type="NSNotification*">aNotification</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>windowDidBecomeMain:</sel>
          <arg type="NSNotification*">aNotification</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>windowDidChangeScreen:</sel>
          <arg type="NSNotification*">aNotification</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>windowDidDeminiaturize:</sel>
          <arg type="NSNotification*">aNotification</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>windowDidExpose:</sel>
          <arg type="NSNotification*">aNotification</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>windowDidMiniaturize:</sel>
          <arg type="NSNotification*">aNotification</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>windowDidMove:</sel>
          <arg type="NSNotification*">aNotification</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>windowDidResignKey:</sel>
          <arg type="NSNotification*">aNotification</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>windowDidResignMain:</sel>
          <arg type="NSNotification*">aNotification</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>windowDidResize:</sel>
          <arg type="NSNotification*">aNotification</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>windowDidUpdate:</sel>
          <arg type="NSNotification*">aNotification</arg>
          <desc>
          </desc>
        </method>
        <method type="BOOL">
          <sel>windowShouldClose:</sel>
          <arg type="id">sender</arg>
          <desc>
          </desc>
        </method>
        <method type="BOOL">
          <sel>windowShouldZoom:</sel>
          <arg type="NSWindow*">sender</arg>
          <sel>toFrame:</sel>
          <arg type="NSRect">aFrame</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>windowWillClose:</sel>
          <arg type="NSNotification*">aNotification</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>windowWillMiniaturize:</sel>
          <arg type="NSNotification*">aNotification</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>windowWillMove:</sel>
          <arg type="NSNotification*">aNotification</arg>
          <desc>
          </desc>
        </method>
        <method type="NSSize">
          <sel>windowWillResize:</sel>
          <arg type="NSWindow*">sender</arg>
          <sel>toSize:</sel>
          <arg type="NSSize">frameSize</arg>
          <desc>
          </desc>
        </method>
        <method type="id">
          <sel>windowWillReturnFieldEditor:</sel>
          <arg type="NSWindow*">sender</arg>
          <sel>toObject:</sel>
          <arg type="id">client</arg>
          <desc>
          </desc>
        </method>
        <method type="NSRect">
          <sel>windowWillUseStandardFrame:</sel>
          <arg type="NSWindow*">sender</arg>
          <sel>defaultFrame:</sel>
          <arg type="NSRect">aFrame</arg>
          <desc>
          </desc>
        </method>
      </category>
    </chapter>
    <chapter>
      <heading>
        Software documentation for the
        NSWindow(GNUstepBackend) category
      </heading>
      <category name="GNUstepBackend" class="NSWindow">
        <declared>AppKit/NSWindow.h</declared>
        <desc>
        </desc>
        <method type="void">
          <sel>_captureMouse:</sel>
          <arg type="id">sender</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>_initDefaults</sel>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>_releaseMouse:</sel>
          <arg type="id">sender</arg>
          <desc>
          </desc>
        </method>
        <method type="void">
          <sel>_setVisible:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
          </desc>
        </method>
      </category>
    </chapter>
    <chapter>
      <heading>
        Software documentation for the
        NSWindow(GNUstepTextView) category
      </heading>
      <category name="GNUstepTextView" class="NSWindow">
        <declared>AppKit/NSWindow.h</declared>
        <desc>
        </desc>
        <method type="id">
          <sel>_futureFirstResponder</sel>
          <desc>
          </desc>
        </method>
      </category>
    </chapter>
  </body>
</gsdoc>
