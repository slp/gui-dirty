Installation
************

This file documents the installation of the GNUstep GUI Library,
`gnustep-gui'.  Copyright (C) 1996 Free Software Foundation, Inc.  You
may copy, distribute, and modify it freely as long as you preserve this
copyright notice and permission notice.

   This is version 0.3.0 of the GNUstep GUI library.

Installing `gnustep-gui'
========================

   Here is a quick-and-dirty example of installation commands:

     ./configure --prefix=/usr/GNUstep
     make
     make install

   Here are more detailed instructions.

  1. Install `gcc'.  The library requires gcc version 2.7.0 or later.

  2. Install `gnustep-base' or `libFoundation'.  This library requires
     the classes either in the GNUstep Base Library or libFoundation.
     You must also apply the Objective-C Runtime patches to GCC which
     makes the runtime thread-safe, if your version of GCC lacks them.

  3. Install the `TIFF' library.  This library requires the header files
     in the TIFF library to compile; the TIFF library is used for the
     NSImage and associated classes for reading, writing, and
     manipulating tiff files.

  4. Install `DGS'.  Though this library does not directly use the
     Display Ghostscript System; it does require the DPS client library
     headers in order to compile.  You should have at least version
     0.2.0; likewise, you could just install the DPS client library
     itself in which use version 6.1.

  5. Configure the package for your system.  In the directory that this
     file is in, type `./configure'.  If you're using `csh' on an old
     version of System V, you might need to type `sh configure' instead
     to prevent `csh' from trying to execute `configure' itself.

     The `configure' shell script attempts to guess correct values for
     various system-dependent variables used during compilation, and
     creates the Makefile(s) (one in each subdirectory of the source
     directory).  In some packages it creates a C header file
     containing system-dependent definitions.  It also creates a file
     `config.status' that you can run in the future to recreate the
     current configuration.

     Running `configure' takes less than a minute or two.  While it is
     running, it prints some messages that tell what it is doing.  If
     you don't want to see the messages, run `configure' with its
     standard output redirected to `/dev/null'; for example:
          ./configure >/dev/null

     To compile the package in a different directory from the one
     containing the source code, you must use a version of make that
     supports the VPATH variable, such as GNU make.  `cd' to the
     directory where you want the object files and executables to go and
     run `configure'.  `configure' automatically checks for the source
     code in the directory that `configure' is in and in `..'.  If for
     some reason `configure' is not in the source code directory that
     you are configuring, then it will report that it can't find the
     source code.  In that case, run `configure' with the option
     `--srcdir=DIR', where DIR is the directory that contains the
     source code.

     By default, `make install' will install the package's files in
     /usr/local/bin, /usr/local/lib, /usr/local/man, etc.  You can
     specify an installation prefix other than /usr/local by giving
     `configure' the option `--prefix=PATH'.  Alternately, you can do
     so by giving a value for the `prefix' variable when you run
     `make', e.g.,
          make prefix=/usr/gnu

     You can specify separate installation prefixes for
     architecture-specific files and architecture-independent files.  If
     you give `configure' the option `--exec_prefix=PATH' or set the
     `make' variable `exec_prefix' to PATH, the package will use PATH
     as the prefix for installing programs and libraries.  Data files
     and documentation will still use the regular prefix.  Normally,
     all files are installed using the regular prefix.

     You can tell `configure' to figure out the configuration for your
     system, and record it in `config.status', without actually
     configuring the package (creating Makefile(s) and perhaps a
     configuration header file).  To do this, give `configure' the
     `--no-create' option.  Later, you can run `./config.status' to
     actually configure the package.  This option is useful mainly in
     `Makefile' rules for updating `config.status' and `Makefile'.  You
     can also give `config.status' the `--recheck' option, which makes
     it re-run `configure' with the same arguments you used before.
     This is useful if you change `configure'.

     `configure' ignores any other arguments that you give it.

     If your system requires unusual options for compilation or linking
     that `configure' doesn't know about, you can give `configure'
     initial values for some variables by setting them in the
     environment.  In Bourne-compatible shells, you can do that on the
     command line like this:
          CC='gcc -traditional' DEFS=-D_POSIX_SOURCE ./configure

     The `make' variables that you might want to override with
     environment variables when running `configure' are:

     (For these variables, any value given in the environment overrides
     the value that `configure' would choose:)
    `CC'
          C compiler program.  Default is `cc', or `gcc' if `gcc' is in
          your PATH.

    `INSTALL'
          Program to use to install files.  Default is `install' if you
          have it, `install.sh' otherwise.

     (For these variables, any value given in the environment is added
     to the value that `configure' chooses:)
    `DEFS'
          Configuration options, in the form `-Dfoo -Dbar ...'

    `LIBS'
          Libraries to link with, in the form `-lfoo -lbar ...'

     If you need to do unusual things to compile the package, we
     encourage you to figure out how `configure.in' could check whether
     to do them, and mail diffs or instructions to the address given in
     the `README' so we can include them in the next release.

  6. Type `make' to compile the package.  If you want, you can override
     the `make' variables `CFLAGS' and `LDFLAGS' like this:
          make CFLAGS=-O2 LDFLAGS=-s

  7. Type `make install' to install the library, data files, header
     files, and documentation.

  8. You can remove the program binaries and object files from the
     source directory by typing `make clean'.  To also remove the
     Makefile(s), and `config.status' (all the files that `configure'
     created), type `make distclean'.

     The file `configure.in' is used as a template to create
     `configure' by a program called `autoconf'.  You will only need it
     if you want to regenerate `configure' using a newer version of
     `autoconf'.

